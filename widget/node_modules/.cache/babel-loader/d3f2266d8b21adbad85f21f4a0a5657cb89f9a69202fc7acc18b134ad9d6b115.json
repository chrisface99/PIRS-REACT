{"ast":null,"code":"import { IATA_CITY_MAPPING } from \"./config.js\";\nexport function getCityNameFromIATA(iata) {\n  const mapping = IATA_CITY_MAPPING.find(entry => entry.iata === iata);\n  return mapping ? mapping.city : \"Unknown City\";\n}\nexport function formatFlightTime(dateString, useUTC = false) {\n  const date = new Date(dateString);\n  if (useUTC) {\n    // Always show UTC time\n    return date.toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false,\n      timeZone: \"UTC\"\n    });\n  } else {\n    // Show local time\n    return date.toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    });\n  }\n}\nexport function isUpcomingFlight(flightTime, isArrival = false) {\n  const currentTime = new Date();\n  const currentHour = currentTime.getHours();\n  const currentMinutes = currentTime.getMinutes();\n  const flightDateTime = new Date(flightTime);\n  const flightHour = flightDateTime.getHours();\n  const flightMinutes = flightDateTime.getMinutes();\n  return flightHour > currentHour || flightHour === currentHour && flightMinutes >= currentMinutes;\n}\nexport function sortFlightsByTime(flights, timeField) {\n  return flights.sort((a, b) => {\n    const timeA = new Date(a[timeField].scheduled);\n    const timeB = new Date(b[timeField].scheduled);\n    return timeA - timeB;\n  });\n}\nexport function generateRandomGate() {\n  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 7));\n  const number = Math.floor(Math.random() * 20) + 1;\n  return `${letter}${number}`;\n}\nexport function getRandomFlightStatus() {\n  const statusOptions = [\"On Time\", \"Boarding\", \"Delayed\", \"Cancelled\"];\n  const statusClasses = [\"on-time\", \"boarding\", \"delayed\", \"cancelled\"];\n  const randomIndex = Math.floor(Math.random() * statusOptions.length);\n  return {\n    status: statusOptions[randomIndex],\n    statusClass: statusClasses[randomIndex]\n  };\n}","map":{"version":3,"names":["IATA_CITY_MAPPING","getCityNameFromIATA","iata","mapping","find","entry","city","formatFlightTime","dateString","useUTC","date","Date","toLocaleTimeString","hour","minute","hour12","timeZone","isUpcomingFlight","flightTime","isArrival","currentTime","currentHour","getHours","currentMinutes","getMinutes","flightDateTime","flightHour","flightMinutes","sortFlightsByTime","flights","timeField","sort","a","b","timeA","scheduled","timeB","generateRandomGate","letter","String","fromCharCode","Math","floor","random","number","getRandomFlightStatus","statusOptions","statusClasses","randomIndex","length","status","statusClass"],"sources":["C:/Users/c.pulawski/workspace/pirs-react-app/widget/src/services/utils.js"],"sourcesContent":["import { IATA_CITY_MAPPING } from \"./config.js\";\r\n\r\nexport function getCityNameFromIATA(iata) {\r\n  const mapping = IATA_CITY_MAPPING.find((entry) => entry.iata === iata);\r\n  return mapping ? mapping.city : \"Unknown City\";\r\n}\r\n\r\nexport function formatFlightTime(dateString, useUTC = false) {\r\n  const date = new Date(dateString);\r\n  if (useUTC) {\r\n    // Always show UTC time\r\n    return date.toLocaleTimeString(\"en-US\", {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      hour12: false,\r\n      timeZone: \"UTC\"\r\n    });\r\n  } else {\r\n    // Show local time\r\n    return date.toLocaleTimeString(\"en-US\", {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      hour12: false,\r\n    });\r\n  }\r\n}\r\n\r\nexport function isUpcomingFlight(flightTime, isArrival = false) {\r\n  const currentTime = new Date();\r\n  const currentHour = currentTime.getHours();\r\n  const currentMinutes = currentTime.getMinutes();\r\n\r\n  const flightDateTime = new Date(flightTime);\r\n  const flightHour = flightDateTime.getHours();\r\n  const flightMinutes = flightDateTime.getMinutes();\r\n\r\n  return (\r\n    flightHour > currentHour ||\r\n    (flightHour === currentHour && flightMinutes >= currentMinutes)\r\n  );\r\n}\r\n\r\nexport function sortFlightsByTime(flights, timeField) {\r\n  return flights.sort((a, b) => {\r\n    const timeA = new Date(a[timeField].scheduled);\r\n    const timeB = new Date(b[timeField].scheduled);\r\n    return timeA - timeB;\r\n  });\r\n}\r\n\r\nexport function generateRandomGate() {\r\n  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 7));\r\n  const number = Math.floor(Math.random() * 20) + 1;\r\n  return `${letter}${number}`;\r\n}\r\n\r\nexport function getRandomFlightStatus() {\r\n  const statusOptions = [\"On Time\", \"Boarding\", \"Delayed\", \"Cancelled\"];\r\n  const statusClasses = [\"on-time\", \"boarding\", \"delayed\", \"cancelled\"];\r\n  const randomIndex = Math.floor(Math.random() * statusOptions.length);\r\n\r\n  return {\r\n    status: statusOptions[randomIndex],\r\n    statusClass: statusClasses[randomIndex],\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}