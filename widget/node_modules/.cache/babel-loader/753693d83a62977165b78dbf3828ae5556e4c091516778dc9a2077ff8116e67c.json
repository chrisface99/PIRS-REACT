{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\c.pulawski\\\\workspace\\\\pirs-react-app\\\\widget\\\\src\\\\components\\\\AirportApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Header from './Header';\nimport FlightTable from './FlightTable';\nimport Ticker from './Ticker';\nimport WeatherService from '../services/WeatherService';\nimport FlightService from '../services/FlightService';\nimport { CONFIG, IATA_TO_CITY_MAPPING } from '../services/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AirportApp = () => {\n  _s();\n  // State management\n  const [airportCode, setAirportCode] = useState('WAW');\n  const [airportLocation, setAirportLocation] = useState('WARSAW');\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [weather, setWeather] = useState({\n    temp: 'Loading...',\n    condition: 'Loading...',\n    icon: '🌤️'\n  });\n  const [flightData, setFlightData] = useState({\n    departures: [],\n    arrivals: []\n  });\n  const [flightStatusUpdates, setFlightStatusUpdates] = useState([]);\n  const [tickerConfig, setTickerConfig] = useState({\n    userTicker: \"Welcome to the Airport Flight Information System!\",\n    userTickerDirection: \"left\",\n    showDefaultTicker: true,\n    userTickerSpeed: 60,\n    userTickerFrequency: 20\n  });\n  const [appConfig, setAppConfig] = useState({\n    rowsCount: 15,\n    template: 'flightScheduleMain'\n  });\n\n  // Service instances\n  const weatherService = useRef(new WeatherService());\n  const flightService = useRef(new FlightService());\n\n  // Intervals\n  const clockInterval = useRef(null);\n  const dataRefreshInterval = useRef(null);\n  const weatherRefreshInterval = useRef(null);\n\n  // VXT message handler (must be outside setupVxtMessageListener for cleanup)\n  const handleVxtMessage = event => {\n    const {\n      type,\n      ...data\n    } = event.data;\n    switch (type) {\n      case 'VXT_AIRPORT_UPDATE':\n        setAirportCode(data.code);\n        setAirportLocation(data.location);\n        CONFIG.iataCodeCity = data.code;\n        break;\n      case 'VXT_TOKEN_UPDATE':\n        CONFIG.AVIATIONSTACK_API_KEY = data.token;\n        break;\n      case 'VXT_CONFIG_UPDATE':\n        handleConfigUpdate(data.config);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Initialize application\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Start clock\n        startClock();\n\n        // Setup VXT message listener\n        setupVxtMessageListener();\n\n        // Update initial weather\n        await updateWeather(airportLocation);\n\n        // Update initial flight data\n        await updateFlightData();\n\n        // Setup refresh intervals\n        setupRefreshIntervals();\n        console.log(\"Airport Flight Information System initialized\");\n      } catch (error) {\n        console.error(\"Failed to initialize Airport App:\", error);\n      }\n    };\n    initializeApp();\n\n    // Cleanup on unmount\n    return () => {\n      if (clockInterval.current) clearInterval(clockInterval.current);\n      if (dataRefreshInterval.current) clearInterval(dataRefreshInterval.current);\n      if (weatherRefreshInterval.current) clearInterval(weatherRefreshInterval.current);\n      window.removeEventListener('message', handleVxtMessage);\n    };\n  }, []);\n\n  // Update weather when airport location changes\n  useEffect(() => {\n    updateWeather(airportLocation);\n  }, [airportLocation]);\n\n  // Update flight data when airport code changes\n  useEffect(() => {\n    updateFlightData();\n  }, [airportCode]);\n  const startClock = () => {\n    const updateClock = () => {\n      setCurrentTime(new Date());\n    };\n    updateClock(); // Initial update\n    clockInterval.current = setInterval(updateClock, 1000);\n  };\n  const setupVxtMessageListener = () => {\n    window.addEventListener('message', handleVxtMessage);\n  };\n  const handleConfigUpdate = config => {\n    if (config.inputuserTickerText || config.userTickerDirection || config.userTickerSpeed || config.userTickerFrequency || config.showDefaultTicker !== undefined) {\n      setTickerConfig(prev => ({\n        ...prev,\n        userTicker: config.inputuserTickerText || prev.userTicker,\n        userTickerDirection: config.userTickerDirection || prev.userTickerDirection,\n        userTickerSpeed: config.userTickerSpeed || prev.userTickerSpeed,\n        userTickerFrequency: config.userTickerFrequency || prev.userTickerFrequency,\n        showDefaultTicker: config.showDefaultTicker !== undefined ? config.showDefaultTicker === \"true\" : prev.showDefaultTicker\n      }));\n    }\n    if (config.rowsCount) {\n      setAppConfig(prev => ({\n        ...prev,\n        rowsCount: config.rowsCount\n      }));\n    }\n    if (config.template) {\n      setAppConfig(prev => ({\n        ...prev,\n        template: config.template\n      }));\n    }\n    if (config.Token) {\n      CONFIG.AVIATIONSTACK_API_KEY = config.Token;\n    }\n    if (config.iataCodeCity) {\n      const city = IATA_TO_CITY_MAPPING[config.iataCodeCity] || \"UNKNOWN\";\n      setAirportCode(config.iataCodeCity);\n      setAirportLocation(city);\n      CONFIG.iataCodeCity = config.iataCodeCity;\n    }\n  };\n  const updateWeather = async location => {\n    try {\n      const weatherData = await weatherService.current.fetchWeather(location);\n      setWeather(weatherData);\n    } catch (error) {\n      console.error(\"Error updating weather:\", error);\n    }\n  };\n  const updateFlightData = async () => {\n    try {\n      flightService.current.updateFromConfig({\n        iataCodeCity: airportCode\n      });\n      const [departures, arrivals] = await Promise.all([flightService.current.fetchFlights('departure', airportCode), flightService.current.fetchArrivals()]);\n      setFlightData({\n        departures,\n        arrivals\n      });\n\n      // Update flight status updates for ticker\n      const updates = [];\n      [...departures, ...arrivals].forEach(flight => {\n        const type = flight.departure ? 'departure' : 'arrival';\n        updates.push(generateFlightStatusUpdate(flight, type));\n      });\n      setFlightStatusUpdates(updates);\n    } catch (error) {\n      console.error(\"Error updating flight data:\", error);\n    }\n  };\n  const generateFlightStatusUpdate = (flight, type) => {\n    var _flight$flight, _flight$flight2, _flight$flight3, _flight$flight4, _flight$type, _flight$type2, _flight, _flight2;\n    const flightNumber = ((_flight$flight = flight.flight) === null || _flight$flight === void 0 ? void 0 : _flight$flight.iataNumber) || ((_flight$flight2 = flight.flight) === null || _flight$flight2 === void 0 ? void 0 : _flight$flight2.icaoNumber) || ((_flight$flight3 = flight.flight) === null || _flight$flight3 === void 0 ? void 0 : _flight$flight3.number) || ((_flight$flight4 = flight.flight) === null || _flight$flight4 === void 0 ? void 0 : _flight$flight4.iata) || \"N/A\";\n    const scheduledTime = new Date(((_flight$type = flight[type]) === null || _flight$type === void 0 ? void 0 : _flight$type.scheduledTime) || ((_flight$type2 = flight[type]) === null || _flight$type2 === void 0 ? void 0 : _flight$type2.scheduled)).toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    });\n    const cityIata = ((_flight = flight[type === \"departure\" ? \"arrival\" : \"departure\"]) === null || _flight === void 0 ? void 0 : _flight.iataCode) || ((_flight2 = flight[type === \"departure\" ? \"arrival\" : \"departure\"]) === null || _flight2 === void 0 ? void 0 : _flight2.iata) || \"Unknown\";\n    return `Flight ${flightNumber} ${type === \"departure\" ? \"to\" : \"from\"} ${cityIata} scheduled at ${scheduledTime}`;\n  };\n  const setupRefreshIntervals = () => {\n    // Weather refresh interval\n    weatherRefreshInterval.current = setInterval(async () => {\n      if (airportLocation) {\n        await updateWeather(airportLocation);\n      }\n    }, CONFIG.WEATHER_REFRESH_INTERVAL);\n\n    // Flight data refresh interval\n    dataRefreshInterval.current = setInterval(async () => {\n      await updateFlightData();\n    }, CONFIG.DATA_REFRESH_INTERVAL);\n  };\n  const shouldShowDepartures = appConfig.template === 'flightScheduleMain' || appConfig.template === 'flightScheduleDepartures';\n  const shouldShowArrivals = appConfig.template === 'flightScheduleMain' || appConfig.template === 'flightScheduleArrivals';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      airportCode: airportCode,\n      currentTime: currentTime,\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flights-container\",\n        children: [shouldShowDepartures && /*#__PURE__*/_jsxDEV(FlightTable, {\n          type: \"departures\",\n          flights: flightData.departures,\n          airportLocation: airportLocation,\n          rowsCount: appConfig.rowsCount,\n          flightService: flightService.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), shouldShowArrivals && /*#__PURE__*/_jsxDEV(FlightTable, {\n          type: \"arrivals\",\n          flights: flightData.arrivals,\n          airportLocation: airportLocation,\n          rowsCount: appConfig.rowsCount,\n          flightService: flightService.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Ticker, {\n      config: tickerConfig,\n      flightStatusUpdates: flightStatusUpdates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(AirportApp, \"q3Rrj/VuCtsW6AkfXkYcPZkS1os=\");\n_c = AirportApp;\nexport default AirportApp;\nvar _c;\n$RefreshReg$(_c, \"AirportApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","FlightTable","Ticker","WeatherService","FlightService","CONFIG","IATA_TO_CITY_MAPPING","jsxDEV","_jsxDEV","AirportApp","_s","airportCode","setAirportCode","airportLocation","setAirportLocation","currentTime","setCurrentTime","Date","weather","setWeather","temp","condition","icon","flightData","setFlightData","departures","arrivals","flightStatusUpdates","setFlightStatusUpdates","tickerConfig","setTickerConfig","userTicker","userTickerDirection","showDefaultTicker","userTickerSpeed","userTickerFrequency","appConfig","setAppConfig","rowsCount","template","weatherService","flightService","clockInterval","dataRefreshInterval","weatherRefreshInterval","handleVxtMessage","event","type","data","code","location","iataCodeCity","AVIATIONSTACK_API_KEY","token","handleConfigUpdate","config","initializeApp","startClock","setupVxtMessageListener","updateWeather","updateFlightData","setupRefreshIntervals","console","log","error","current","clearInterval","window","removeEventListener","updateClock","setInterval","addEventListener","inputuserTickerText","undefined","prev","Token","city","weatherData","fetchWeather","updateFromConfig","Promise","all","fetchFlights","fetchArrivals","updates","forEach","flight","departure","push","generateFlightStatusUpdate","_flight$flight","_flight$flight2","_flight$flight3","_flight$flight4","_flight$type","_flight$type2","_flight","_flight2","flightNumber","iataNumber","icaoNumber","number","iata","scheduledTime","scheduled","toLocaleTimeString","hour","minute","hour12","cityIata","iataCode","WEATHER_REFRESH_INTERVAL","DATA_REFRESH_INTERVAL","shouldShowDepartures","shouldShowArrivals","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","flights","_c","$RefreshReg$"],"sources":["C:/Users/c.pulawski/workspace/pirs-react-app/widget/src/components/AirportApp.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Header from './Header';\r\nimport FlightTable from './FlightTable';\r\nimport Ticker from './Ticker';\r\nimport WeatherService from '../services/WeatherService';\r\nimport FlightService from '../services/FlightService';\r\nimport { CONFIG, IATA_TO_CITY_MAPPING } from '../services/config';\r\n\r\nconst AirportApp = () => {\r\n  // State management\r\n  const [airportCode, setAirportCode] = useState('WAW');\r\n  const [airportLocation, setAirportLocation] = useState('WARSAW');\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [weather, setWeather] = useState({ \r\n    temp: 'Loading...', \r\n    condition: 'Loading...', \r\n    icon: '🌤️' \r\n  });\r\n  const [flightData, setFlightData] = useState({ \r\n    departures: [], \r\n    arrivals: [] \r\n  });\r\n  const [flightStatusUpdates, setFlightStatusUpdates] = useState([]);\r\n  const [tickerConfig, setTickerConfig] = useState({\r\n    userTicker: \"Welcome to the Airport Flight Information System!\",\r\n    userTickerDirection: \"left\",\r\n    showDefaultTicker: true,\r\n    userTickerSpeed: 60,\r\n    userTickerFrequency: 20\r\n  });\r\n  const [appConfig, setAppConfig] = useState({\r\n    rowsCount: 15,\r\n    template: 'flightScheduleMain'\r\n  });\r\n\r\n  // Service instances\r\n  const weatherService = useRef(new WeatherService());\r\n  const flightService = useRef(new FlightService());\r\n  \r\n  // Intervals\r\n  const clockInterval = useRef(null);\r\n  const dataRefreshInterval = useRef(null);\r\n  const weatherRefreshInterval = useRef(null);\r\n\r\n  // VXT message handler (must be outside setupVxtMessageListener for cleanup)\r\n  const handleVxtMessage = (event) => {\r\n    const { type, ...data } = event.data;\r\n    switch (type) {\r\n      case 'VXT_AIRPORT_UPDATE':\r\n        setAirportCode(data.code);\r\n        setAirportLocation(data.location);\r\n        CONFIG.iataCodeCity = data.code;\r\n        break;\r\n      case 'VXT_TOKEN_UPDATE':\r\n        CONFIG.AVIATIONSTACK_API_KEY = data.token;\r\n        break;\r\n      case 'VXT_CONFIG_UPDATE':\r\n        handleConfigUpdate(data.config);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Initialize application\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      try {\r\n        // Start clock\r\n        startClock();\r\n\r\n        // Setup VXT message listener\r\n        setupVxtMessageListener();\r\n\r\n        // Update initial weather\r\n        await updateWeather(airportLocation);\r\n\r\n        // Update initial flight data\r\n        await updateFlightData();\r\n\r\n        // Setup refresh intervals\r\n        setupRefreshIntervals();\r\n\r\n        console.log(\"Airport Flight Information System initialized\");\r\n      } catch (error) {\r\n        console.error(\"Failed to initialize Airport App:\", error);\r\n      }\r\n    };\r\n\r\n    initializeApp();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (clockInterval.current) clearInterval(clockInterval.current);\r\n      if (dataRefreshInterval.current) clearInterval(dataRefreshInterval.current);\r\n      if (weatherRefreshInterval.current) clearInterval(weatherRefreshInterval.current);\r\n      window.removeEventListener('message', handleVxtMessage);\r\n    };\r\n  }, []);\r\n\r\n  // Update weather when airport location changes\r\n  useEffect(() => {\r\n    updateWeather(airportLocation);\r\n  }, [airportLocation]);\r\n\r\n  // Update flight data when airport code changes\r\n  useEffect(() => {\r\n    updateFlightData();\r\n  }, [airportCode]);\r\n\r\n  const startClock = () => {\r\n    const updateClock = () => {\r\n      setCurrentTime(new Date());\r\n    };\r\n    \r\n    updateClock(); // Initial update\r\n    clockInterval.current = setInterval(updateClock, 1000);\r\n  };\r\n\r\n  const setupVxtMessageListener = () => {\r\n    window.addEventListener('message', handleVxtMessage);\r\n  };\r\n\r\n  const handleConfigUpdate = (config) => {\r\n    if (config.inputuserTickerText || config.userTickerDirection || \r\n        config.userTickerSpeed || config.userTickerFrequency || \r\n        config.showDefaultTicker !== undefined) {\r\n      setTickerConfig(prev => ({\r\n        ...prev,\r\n        userTicker: config.inputuserTickerText || prev.userTicker,\r\n        userTickerDirection: config.userTickerDirection || prev.userTickerDirection,\r\n        userTickerSpeed: config.userTickerSpeed || prev.userTickerSpeed,\r\n        userTickerFrequency: config.userTickerFrequency || prev.userTickerFrequency,\r\n        showDefaultTicker: config.showDefaultTicker !== undefined ? \r\n          config.showDefaultTicker === \"true\" : prev.showDefaultTicker\r\n      }));\r\n    }\r\n    \r\n    if (config.rowsCount) {\r\n      setAppConfig(prev => ({ ...prev, rowsCount: config.rowsCount }));\r\n    }\r\n    \r\n    if (config.template) {\r\n      setAppConfig(prev => ({ ...prev, template: config.template }));\r\n    }\r\n    \r\n    if (config.Token) {\r\n      CONFIG.AVIATIONSTACK_API_KEY = config.Token;\r\n    }\r\n    \r\n    if (config.iataCodeCity) {\r\n      const city = IATA_TO_CITY_MAPPING[config.iataCodeCity] || \"UNKNOWN\";\r\n      setAirportCode(config.iataCodeCity);\r\n      setAirportLocation(city);\r\n      CONFIG.iataCodeCity = config.iataCodeCity;\r\n    }\r\n  };\r\n\r\n  const updateWeather = async (location) => {\r\n    try {\r\n      const weatherData = await weatherService.current.fetchWeather(location);\r\n      setWeather(weatherData);\r\n    } catch (error) {\r\n      console.error(\"Error updating weather:\", error);\r\n    }\r\n  };\r\n\r\n  const updateFlightData = async () => {\r\n    try {\r\n      flightService.current.updateFromConfig({ iataCodeCity: airportCode });\r\n      \r\n      const [departures, arrivals] = await Promise.all([\r\n        flightService.current.fetchFlights('departure', airportCode),\r\n        flightService.current.fetchArrivals()\r\n      ]);\r\n      \r\n      setFlightData({ departures, arrivals });\r\n      \r\n      // Update flight status updates for ticker\r\n      const updates = [];\r\n      [...departures, ...arrivals].forEach(flight => {\r\n        const type = flight.departure ? 'departure' : 'arrival';\r\n        updates.push(generateFlightStatusUpdate(flight, type));\r\n      });\r\n      setFlightStatusUpdates(updates);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error updating flight data:\", error);\r\n    }\r\n  };\r\n\r\n  const generateFlightStatusUpdate = (flight, type) => {\r\n    const flightNumber = flight.flight?.iataNumber || flight.flight?.icaoNumber || \r\n                        flight.flight?.number || flight.flight?.iata || \"N/A\";\r\n    const scheduledTime = new Date(flight[type]?.scheduledTime || flight[type]?.scheduled)\r\n      .toLocaleTimeString(\"en-US\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: false,\r\n      });\r\n    \r\n    const cityIata = flight[type === \"departure\" ? \"arrival\" : \"departure\"]?.iataCode || \r\n                     flight[type === \"departure\" ? \"arrival\" : \"departure\"]?.iata || \"Unknown\";\r\n    \r\n    return `Flight ${flightNumber} ${type === \"departure\" ? \"to\" : \"from\"} ${cityIata} scheduled at ${scheduledTime}`;\r\n  };\r\n\r\n  const setupRefreshIntervals = () => {\r\n    // Weather refresh interval\r\n    weatherRefreshInterval.current = setInterval(async () => {\r\n      if (airportLocation) {\r\n        await updateWeather(airportLocation);\r\n      }\r\n    }, CONFIG.WEATHER_REFRESH_INTERVAL);\r\n\r\n    // Flight data refresh interval\r\n    dataRefreshInterval.current = setInterval(async () => {\r\n      await updateFlightData();\r\n    }, CONFIG.DATA_REFRESH_INTERVAL);\r\n  };\r\n\r\n  const shouldShowDepartures = appConfig.template === 'flightScheduleMain' || \r\n                              appConfig.template === 'flightScheduleDepartures';\r\n  const shouldShowArrivals = appConfig.template === 'flightScheduleMain' || \r\n                            appConfig.template === 'flightScheduleArrivals';\r\n\r\n  return (\r\n    <div id=\"canvas-container\">\r\n      <Header \r\n        airportCode={airportCode}\r\n        currentTime={currentTime}\r\n        weather={weather}\r\n      />\r\n      \r\n      <main>\r\n        <div className=\"flights-container\">\r\n          {shouldShowDepartures && (\r\n            <FlightTable\r\n              type=\"departures\"\r\n              flights={flightData.departures}\r\n              airportLocation={airportLocation}\r\n              rowsCount={appConfig.rowsCount}\r\n              flightService={flightService.current}\r\n            />\r\n          )}\r\n          \r\n          {shouldShowArrivals && (\r\n            <FlightTable\r\n              type=\"arrivals\"\r\n              flights={flightData.arrivals}\r\n              airportLocation={airportLocation}\r\n              rowsCount={appConfig.rowsCount}\r\n              flightService={flightService.current}\r\n            />\r\n          )}\r\n        </div>\r\n      </main>\r\n      \r\n      <Ticker \r\n        config={tickerConfig}\r\n        flightStatusUpdates={flightStatusUpdates}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AirportApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}