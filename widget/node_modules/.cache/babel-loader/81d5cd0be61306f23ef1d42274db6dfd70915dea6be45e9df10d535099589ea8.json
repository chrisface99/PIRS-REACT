{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import Header from'./Header';import FlightTable from'./FlightTable';import Ticker from'./Ticker';import WeatherService from'../services/WeatherService';import FlightService from'../services/FlightService';import{CONFIG,IATA_TO_CITY_MAPPING}from'../services/config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AirportApp=()=>{// State management\nconst[airportCode,setAirportCode]=useState('WAW');const[airportLocation,setAirportLocation]=useState('WARSAW');const[currentTime,setCurrentTime]=useState(new Date());const[weather,setWeather]=useState({temp:'Loading...',condition:'Loading...',icon:'🌤️'});const[flightData,setFlightData]=useState({departures:[],arrivals:[]});const[flightStatusUpdates,setFlightStatusUpdates]=useState([]);const[tickerConfig,setTickerConfig]=useState({userTicker:\"Welcome to the Airport Flight Information System!\",userTickerDirection:\"left\",showDefaultTicker:true,userTickerSpeed:60,userTickerFrequency:20});const[appConfig,setAppConfig]=useState({rowsCount:15,template:'flightScheduleMain'});// Service instances\nconst weatherService=useRef(new WeatherService());const flightService=useRef(new FlightService());// Intervals\nconst clockInterval=useRef(null);const dataRefreshInterval=useRef(null);const weatherRefreshInterval=useRef(null);// VXT message handler (must be outside setupVxtMessageListener for cleanup)\nconst handleVxtMessage=event=>{const{type,...data}=event.data;switch(type){case'VXT_AIRPORT_UPDATE':setAirportCode(data.code);setAirportLocation(data.location);CONFIG.iataCodeCity=data.code;break;case'VXT_TOKEN_UPDATE':CONFIG.AVIATIONSTACK_API_KEY=data.token;break;case'VXT_CONFIG_UPDATE':handleConfigUpdate(data.config);break;default:break;}};// Initialize application\nuseEffect(()=>{const initializeApp=async()=>{try{// Start clock\nstartClock();// Setup VXT message listener\nsetupVxtMessageListener();// Update initial weather\nawait updateWeather(airportLocation);// Update initial flight data\nawait updateFlightData();// Setup refresh intervals\nsetupRefreshIntervals();console.log(\"Airport Flight Information System initialized\");}catch(error){console.error(\"Failed to initialize Airport App:\",error);}};initializeApp();// Cleanup on unmount\nreturn()=>{if(clockInterval.current)clearInterval(clockInterval.current);if(dataRefreshInterval.current)clearInterval(dataRefreshInterval.current);if(weatherRefreshInterval.current)clearInterval(weatherRefreshInterval.current);window.removeEventListener('message',handleVxtMessage);};},[]);// Update weather when airport location changes\nuseEffect(()=>{updateWeather(airportLocation);},[airportLocation]);// Update flight data when airport code changes\nuseEffect(()=>{updateFlightData();},[airportCode]);const startClock=()=>{const updateClock=()=>{setCurrentTime(new Date());};updateClock();// Initial update\nclockInterval.current=setInterval(updateClock,1000);};const setupVxtMessageListener=()=>{window.addEventListener('message',handleVxtMessage);};const handleConfigUpdate=config=>{if(config.inputuserTickerText||config.userTickerDirection||config.userTickerSpeed||config.userTickerFrequency||config.showDefaultTicker!==undefined){setTickerConfig(prev=>({...prev,userTicker:config.inputuserTickerText||prev.userTicker,userTickerDirection:config.userTickerDirection||prev.userTickerDirection,userTickerSpeed:config.userTickerSpeed||prev.userTickerSpeed,userTickerFrequency:config.userTickerFrequency||prev.userTickerFrequency,showDefaultTicker:config.showDefaultTicker!==undefined?config.showDefaultTicker===\"true\":prev.showDefaultTicker}));}if(config.rowsCount){setAppConfig(prev=>({...prev,rowsCount:config.rowsCount}));}if(config.template){setAppConfig(prev=>({...prev,template:config.template}));}if(config.Token){CONFIG.AVIATIONSTACK_API_KEY=config.Token;}if(config.iataCodeCity){const city=IATA_TO_CITY_MAPPING[config.iataCodeCity]||\"UNKNOWN\";setAirportCode(config.iataCodeCity);setAirportLocation(city);CONFIG.iataCodeCity=config.iataCodeCity;}};const updateWeather=async location=>{try{const weatherData=await weatherService.current.fetchWeather(location);setWeather(weatherData);}catch(error){console.error(\"Error updating weather:\",error);}};const updateFlightData=async()=>{try{flightService.current.updateFromConfig({iataCodeCity:airportCode});const[departures,arrivals]=await Promise.all([flightService.current.fetchFlights('departure',airportCode),flightService.current.fetchArrivals()]);setFlightData({departures,arrivals});// Update flight status updates for ticker\nconst updates=[];[...departures,...arrivals].forEach(flight=>{const type=flight.departure?'departure':'arrival';updates.push(generateFlightStatusUpdate(flight,type));});setFlightStatusUpdates(updates);}catch(error){console.error(\"Error updating flight data:\",error);}};const generateFlightStatusUpdate=(flight,type)=>{var _flight$flight,_flight$flight2,_flight$flight3,_flight$flight4,_flight$type,_flight$type2,_flight,_flight2;const flightNumber=((_flight$flight=flight.flight)===null||_flight$flight===void 0?void 0:_flight$flight.iataNumber)||((_flight$flight2=flight.flight)===null||_flight$flight2===void 0?void 0:_flight$flight2.icaoNumber)||((_flight$flight3=flight.flight)===null||_flight$flight3===void 0?void 0:_flight$flight3.number)||((_flight$flight4=flight.flight)===null||_flight$flight4===void 0?void 0:_flight$flight4.iata)||\"N/A\";const scheduledTime=new Date(((_flight$type=flight[type])===null||_flight$type===void 0?void 0:_flight$type.scheduledTime)||((_flight$type2=flight[type])===null||_flight$type2===void 0?void 0:_flight$type2.scheduled)).toLocaleTimeString(\"en-US\",{hour:\"2-digit\",minute:\"2-digit\",hour12:false});const cityIata=((_flight=flight[type===\"departure\"?\"arrival\":\"departure\"])===null||_flight===void 0?void 0:_flight.iataCode)||((_flight2=flight[type===\"departure\"?\"arrival\":\"departure\"])===null||_flight2===void 0?void 0:_flight2.iata)||\"Unknown\";return`Flight ${flightNumber} ${type===\"departure\"?\"to\":\"from\"} ${cityIata} scheduled at ${scheduledTime}`;};const setupRefreshIntervals=()=>{// Weather refresh interval\nweatherRefreshInterval.current=setInterval(async()=>{if(airportLocation){await updateWeather(airportLocation);}},CONFIG.WEATHER_REFRESH_INTERVAL);// Flight data refresh interval\ndataRefreshInterval.current=setInterval(async()=>{await updateFlightData();},CONFIG.DATA_REFRESH_INTERVAL);};const shouldShowDepartures=appConfig.template==='flightScheduleMain'||appConfig.template==='flightScheduleDepartures';const shouldShowArrivals=appConfig.template==='flightScheduleMain'||appConfig.template==='flightScheduleArrivals';return/*#__PURE__*/_jsxs(\"div\",{id:\"canvas-container\",children:[/*#__PURE__*/_jsx(Header,{airportCode:airportCode,currentTime:currentTime,weather:weather}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"flights-container\",children:[shouldShowDepartures&&/*#__PURE__*/_jsx(FlightTable,{type:\"departures\",flights:flightData.departures,airportLocation:airportLocation,rowsCount:appConfig.rowsCount,flightService:flightService.current}),shouldShowArrivals&&/*#__PURE__*/_jsx(FlightTable,{type:\"arrivals\",flights:flightData.arrivals,airportLocation:airportLocation,rowsCount:appConfig.rowsCount,flightService:flightService.current})]})}),/*#__PURE__*/_jsx(Ticker,{config:tickerConfig,flightStatusUpdates:flightStatusUpdates})]});};export default AirportApp;","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","FlightTable","Ticker","WeatherService","FlightService","CONFIG","IATA_TO_CITY_MAPPING","jsx","_jsx","jsxs","_jsxs","AirportApp","airportCode","setAirportCode","airportLocation","setAirportLocation","currentTime","setCurrentTime","Date","weather","setWeather","temp","condition","icon","flightData","setFlightData","departures","arrivals","flightStatusUpdates","setFlightStatusUpdates","tickerConfig","setTickerConfig","userTicker","userTickerDirection","showDefaultTicker","userTickerSpeed","userTickerFrequency","appConfig","setAppConfig","rowsCount","template","weatherService","flightService","clockInterval","dataRefreshInterval","weatherRefreshInterval","handleVxtMessage","event","type","data","code","location","iataCodeCity","AVIATIONSTACK_API_KEY","token","handleConfigUpdate","config","initializeApp","startClock","setupVxtMessageListener","updateWeather","updateFlightData","setupRefreshIntervals","console","log","error","current","clearInterval","window","removeEventListener","updateClock","setInterval","addEventListener","inputuserTickerText","undefined","prev","Token","city","weatherData","fetchWeather","updateFromConfig","Promise","all","fetchFlights","fetchArrivals","updates","forEach","flight","departure","push","generateFlightStatusUpdate","_flight$flight","_flight$flight2","_flight$flight3","_flight$flight4","_flight$type","_flight$type2","_flight","_flight2","flightNumber","iataNumber","icaoNumber","number","iata","scheduledTime","scheduled","toLocaleTimeString","hour","minute","hour12","cityIata","iataCode","WEATHER_REFRESH_INTERVAL","DATA_REFRESH_INTERVAL","shouldShowDepartures","shouldShowArrivals","id","children","className","flights"],"sources":["C:/Users/c.pulawski/workspace/pirs-react-app/widget/src/components/AirportApp.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Header from './Header';\r\nimport FlightTable from './FlightTable';\r\nimport Ticker from './Ticker';\r\nimport WeatherService from '../services/WeatherService';\r\nimport FlightService from '../services/FlightService';\r\nimport { CONFIG, IATA_TO_CITY_MAPPING } from '../services/config';\r\n\r\nconst AirportApp = () => {\r\n  // State management\r\n  const [airportCode, setAirportCode] = useState('WAW');\r\n  const [airportLocation, setAirportLocation] = useState('WARSAW');\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [weather, setWeather] = useState({ \r\n    temp: 'Loading...', \r\n    condition: 'Loading...', \r\n    icon: '🌤️' \r\n  });\r\n  const [flightData, setFlightData] = useState({ \r\n    departures: [], \r\n    arrivals: [] \r\n  });\r\n  const [flightStatusUpdates, setFlightStatusUpdates] = useState([]);\r\n  const [tickerConfig, setTickerConfig] = useState({\r\n    userTicker: \"Welcome to the Airport Flight Information System!\",\r\n    userTickerDirection: \"left\",\r\n    showDefaultTicker: true,\r\n    userTickerSpeed: 60,\r\n    userTickerFrequency: 20\r\n  });\r\n  const [appConfig, setAppConfig] = useState({\r\n    rowsCount: 15,\r\n    template: 'flightScheduleMain'\r\n  });\r\n\r\n  // Service instances\r\n  const weatherService = useRef(new WeatherService());\r\n  const flightService = useRef(new FlightService());\r\n  \r\n  // Intervals\r\n  const clockInterval = useRef(null);\r\n  const dataRefreshInterval = useRef(null);\r\n  const weatherRefreshInterval = useRef(null);\r\n\r\n  // VXT message handler (must be outside setupVxtMessageListener for cleanup)\r\n  const handleVxtMessage = (event) => {\r\n    const { type, ...data } = event.data;\r\n    switch (type) {\r\n      case 'VXT_AIRPORT_UPDATE':\r\n        setAirportCode(data.code);\r\n        setAirportLocation(data.location);\r\n        CONFIG.iataCodeCity = data.code;\r\n        break;\r\n      case 'VXT_TOKEN_UPDATE':\r\n        CONFIG.AVIATIONSTACK_API_KEY = data.token;\r\n        break;\r\n      case 'VXT_CONFIG_UPDATE':\r\n        handleConfigUpdate(data.config);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Initialize application\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      try {\r\n        // Start clock\r\n        startClock();\r\n\r\n        // Setup VXT message listener\r\n        setupVxtMessageListener();\r\n\r\n        // Update initial weather\r\n        await updateWeather(airportLocation);\r\n\r\n        // Update initial flight data\r\n        await updateFlightData();\r\n\r\n        // Setup refresh intervals\r\n        setupRefreshIntervals();\r\n\r\n        console.log(\"Airport Flight Information System initialized\");\r\n      } catch (error) {\r\n        console.error(\"Failed to initialize Airport App:\", error);\r\n      }\r\n    };\r\n\r\n    initializeApp();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (clockInterval.current) clearInterval(clockInterval.current);\r\n      if (dataRefreshInterval.current) clearInterval(dataRefreshInterval.current);\r\n      if (weatherRefreshInterval.current) clearInterval(weatherRefreshInterval.current);\r\n      window.removeEventListener('message', handleVxtMessage);\r\n    };\r\n  }, []);\r\n\r\n  // Update weather when airport location changes\r\n  useEffect(() => {\r\n    updateWeather(airportLocation);\r\n  }, [airportLocation]);\r\n\r\n  // Update flight data when airport code changes\r\n  useEffect(() => {\r\n    updateFlightData();\r\n  }, [airportCode]);\r\n\r\n  const startClock = () => {\r\n    const updateClock = () => {\r\n      setCurrentTime(new Date());\r\n    };\r\n    \r\n    updateClock(); // Initial update\r\n    clockInterval.current = setInterval(updateClock, 1000);\r\n  };\r\n\r\n  const setupVxtMessageListener = () => {\r\n    window.addEventListener('message', handleVxtMessage);\r\n  };\r\n\r\n  const handleConfigUpdate = (config) => {\r\n    if (config.inputuserTickerText || config.userTickerDirection || \r\n        config.userTickerSpeed || config.userTickerFrequency || \r\n        config.showDefaultTicker !== undefined) {\r\n      setTickerConfig(prev => ({\r\n        ...prev,\r\n        userTicker: config.inputuserTickerText || prev.userTicker,\r\n        userTickerDirection: config.userTickerDirection || prev.userTickerDirection,\r\n        userTickerSpeed: config.userTickerSpeed || prev.userTickerSpeed,\r\n        userTickerFrequency: config.userTickerFrequency || prev.userTickerFrequency,\r\n        showDefaultTicker: config.showDefaultTicker !== undefined ? \r\n          config.showDefaultTicker === \"true\" : prev.showDefaultTicker\r\n      }));\r\n    }\r\n    \r\n    if (config.rowsCount) {\r\n      setAppConfig(prev => ({ ...prev, rowsCount: config.rowsCount }));\r\n    }\r\n    \r\n    if (config.template) {\r\n      setAppConfig(prev => ({ ...prev, template: config.template }));\r\n    }\r\n    \r\n    if (config.Token) {\r\n      CONFIG.AVIATIONSTACK_API_KEY = config.Token;\r\n    }\r\n    \r\n    if (config.iataCodeCity) {\r\n      const city = IATA_TO_CITY_MAPPING[config.iataCodeCity] || \"UNKNOWN\";\r\n      setAirportCode(config.iataCodeCity);\r\n      setAirportLocation(city);\r\n      CONFIG.iataCodeCity = config.iataCodeCity;\r\n    }\r\n  };\r\n\r\n  const updateWeather = async (location) => {\r\n    try {\r\n      const weatherData = await weatherService.current.fetchWeather(location);\r\n      setWeather(weatherData);\r\n    } catch (error) {\r\n      console.error(\"Error updating weather:\", error);\r\n    }\r\n  };\r\n\r\n  const updateFlightData = async () => {\r\n    try {\r\n      flightService.current.updateFromConfig({ iataCodeCity: airportCode });\r\n      \r\n      const [departures, arrivals] = await Promise.all([\r\n        flightService.current.fetchFlights('departure', airportCode),\r\n        flightService.current.fetchArrivals()\r\n      ]);\r\n      \r\n      setFlightData({ departures, arrivals });\r\n      \r\n      // Update flight status updates for ticker\r\n      const updates = [];\r\n      [...departures, ...arrivals].forEach(flight => {\r\n        const type = flight.departure ? 'departure' : 'arrival';\r\n        updates.push(generateFlightStatusUpdate(flight, type));\r\n      });\r\n      setFlightStatusUpdates(updates);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error updating flight data:\", error);\r\n    }\r\n  };\r\n\r\n  const generateFlightStatusUpdate = (flight, type) => {\r\n    const flightNumber = flight.flight?.iataNumber || flight.flight?.icaoNumber || \r\n                        flight.flight?.number || flight.flight?.iata || \"N/A\";\r\n    const scheduledTime = new Date(flight[type]?.scheduledTime || flight[type]?.scheduled)\r\n      .toLocaleTimeString(\"en-US\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hour12: false,\r\n      });\r\n    \r\n    const cityIata = flight[type === \"departure\" ? \"arrival\" : \"departure\"]?.iataCode || \r\n                     flight[type === \"departure\" ? \"arrival\" : \"departure\"]?.iata || \"Unknown\";\r\n    \r\n    return `Flight ${flightNumber} ${type === \"departure\" ? \"to\" : \"from\"} ${cityIata} scheduled at ${scheduledTime}`;\r\n  };\r\n\r\n  const setupRefreshIntervals = () => {\r\n    // Weather refresh interval\r\n    weatherRefreshInterval.current = setInterval(async () => {\r\n      if (airportLocation) {\r\n        await updateWeather(airportLocation);\r\n      }\r\n    }, CONFIG.WEATHER_REFRESH_INTERVAL);\r\n\r\n    // Flight data refresh interval\r\n    dataRefreshInterval.current = setInterval(async () => {\r\n      await updateFlightData();\r\n    }, CONFIG.DATA_REFRESH_INTERVAL);\r\n  };\r\n\r\n  const shouldShowDepartures = appConfig.template === 'flightScheduleMain' || \r\n                              appConfig.template === 'flightScheduleDepartures';\r\n  const shouldShowArrivals = appConfig.template === 'flightScheduleMain' || \r\n                            appConfig.template === 'flightScheduleArrivals';\r\n\r\n  return (\r\n    <div id=\"canvas-container\">\r\n      <Header \r\n        airportCode={airportCode}\r\n        currentTime={currentTime}\r\n        weather={weather}\r\n      />\r\n      \r\n      <main>\r\n        <div className=\"flights-container\">\r\n          {shouldShowDepartures && (\r\n            <FlightTable\r\n              type=\"departures\"\r\n              flights={flightData.departures}\r\n              airportLocation={airportLocation}\r\n              rowsCount={appConfig.rowsCount}\r\n              flightService={flightService.current}\r\n            />\r\n          )}\r\n          \r\n          {shouldShowArrivals && (\r\n            <FlightTable\r\n              type=\"arrivals\"\r\n              flights={flightData.arrivals}\r\n              airportLocation={airportLocation}\r\n              rowsCount={appConfig.rowsCount}\r\n              flightService={flightService.current}\r\n            />\r\n          )}\r\n        </div>\r\n      </main>\r\n      \r\n      <Ticker \r\n        config={tickerConfig}\r\n        flightStatusUpdates={flightStatusUpdates}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AirportApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}