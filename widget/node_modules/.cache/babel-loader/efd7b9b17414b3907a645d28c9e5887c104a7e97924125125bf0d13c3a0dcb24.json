{"ast":null,"code":"// widget/src/components/FlightTable.jsx\nimport React,{useState,useEffect}from'react';import{getCityNameFromIATA,formatFlightTime,isUpcomingFlight,sortFlightsByTime}from'../services/utils';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FlightTable=_ref=>{let{type,flights,airportLocation,rowsCount,flightService}=_ref;const[processedFlights,setProcessedFlights]=useState([]);const[airlineIcons,setAirlineIcons]=useState({});useEffect(()=>{processFlights();},[flights,rowsCount,type]);const processFlights=async()=>{if(!flights||flights.length===0){setProcessedFlights([]);return;}let workingFlights=[...flights];if(type==='departures'){// Filter upcoming flights for departures\nlet upcomingFlights=workingFlights.filter(flight=>{var _flight$departure,_flight$departure2;return isUpcomingFlight(((_flight$departure=flight.departure)===null||_flight$departure===void 0?void 0:_flight$departure.scheduledTime)||((_flight$departure2=flight.departure)===null||_flight$departure2===void 0?void 0:_flight$departure2.scheduled));});if(upcomingFlights.length===0){upcomingFlights=[...workingFlights];}workingFlights=sortFlightsByTime(upcomingFlights,\"departure\");}else{// Filter and sort arrivals\nconst now=Date.now();workingFlights=workingFlights.filter(f=>{if(!f.arrival||!f.arrival.scheduled)return false;const sched=new Date(f.arrival.scheduled).getTime();return sched>=now;}).sort((a,b)=>{const tA=new Date(a.arrival.scheduled).getTime();const tB=new Date(b.arrival.scheduled).getTime();return tA-tB;});}// Remove duplicates and limit rows\nconst uniqueFlights=[];const seenFlightNo=new Set();for(const flight of workingFlights){var _flight$flight,_flight$flight2,_flight$flight3,_flight$flight4;if(uniqueFlights.length>=rowsCount)break;const flightNumber=((_flight$flight=flight.flight)===null||_flight$flight===void 0?void 0:_flight$flight.iataNumber)||((_flight$flight2=flight.flight)===null||_flight$flight2===void 0?void 0:_flight$flight2.iata)||((_flight$flight3=flight.flight)===null||_flight$flight3===void 0?void 0:_flight$flight3.icaoNumber)||((_flight$flight4=flight.flight)===null||_flight$flight4===void 0?void 0:_flight$flight4.number);if(seenFlightNo.has(flightNumber===null||flightNumber===void 0?void 0:flightNumber.toUpperCase())||!!flight.codeshared)continue;uniqueFlights.push(flight);if(flightNumber){seenFlightNo.add(flightNumber.toUpperCase());}}setProcessedFlights(uniqueFlights);// Fetch airline icons\nconst iconPromises=uniqueFlights.map(async flight=>{var _flight$airline,_flight$airline2;const airlineCode=((_flight$airline=flight.airline)===null||_flight$airline===void 0?void 0:_flight$airline.iataCode)||((_flight$airline2=flight.airline)===null||_flight$airline2===void 0?void 0:_flight$airline2.iata)||\"XX\";if(!airlineIcons[airlineCode]){const icon=await flightService.fetchAirlineIcon(airlineCode);return{[airlineCode]:icon};}return null;});const iconResults=await Promise.all(iconPromises);const newIcons=iconResults.reduce((acc,result)=>{if(result)Object.assign(acc,result);return acc;},{});setAirlineIcons(prev=>({...prev,...newIcons}));};const renderFlightRow=(flight,index)=>{var _flight$airline3,_flight$airline4,_flight$flight5,_flight$flight6,_flight$flight7,_flight$flight8;const isDeparture=type==='departures';const flightData=isDeparture?flight.departure:flight.arrival;const destinationData=isDeparture?flight.arrival:flight.departure;const flightTime=formatFlightTime((flightData===null||flightData===void 0?void 0:flightData.scheduledTime)||(flightData===null||flightData===void 0?void 0:flightData.scheduled),!isDeparture);const estimatedTime=flightData!==null&&flightData!==void 0&&flightData.estimatedTime||flightData!==null&&flightData!==void 0&&flightData.estimated?formatFlightTime(flightData.estimatedTime||flightData.estimated,!isDeparture):\"-\";const iataCode=(destinationData===null||destinationData===void 0?void 0:destinationData.iataCode)||(destinationData===null||destinationData===void 0?void 0:destinationData.iata)||\"Unknown\";const cityName=getCityNameFromIATA(iataCode);const airlineCode=((_flight$airline3=flight.airline)===null||_flight$airline3===void 0?void 0:_flight$airline3.iataCode)||((_flight$airline4=flight.airline)===null||_flight$airline4===void 0?void 0:_flight$airline4.iata)||\"XX\";const airlineIcon=airlineIcons[airlineCode]||'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 55 55\"><circle fill=\"#0381fe\" cx=\"27.5\" cy=\"7.5\" r=\"5.6\"/></svg>';const flightNumber=((_flight$flight5=flight.flight)===null||_flight$flight5===void 0?void 0:_flight$flight5.iataNumber)||((_flight$flight6=flight.flight)===null||_flight$flight6===void 0?void 0:_flight$flight6.iata)||((_flight$flight7=flight.flight)===null||_flight$flight7===void 0?void 0:_flight$flight7.icaoNumber)||((_flight$flight8=flight.flight)===null||_flight$flight8===void 0?void 0:_flight$flight8.number)||\"N/A\";let gate=(flightData===null||flightData===void 0?void 0:flightData.gate)||\"Soon\";let status=flight.flight_status||flight.status||\"N/A\";let statusDisplay=status;let statusClass=status.toLowerCase().replace(/\\s/g,\"-\");if(flightData!==null&&flightData!==void 0&&flightData.delay){status=\"delayed\";statusDisplay=\"delayed\";statusClass=\"delayed\";}const rowClass=index%2===0?\"flight-row-even\":\"flight-row-odd\";return/*#__PURE__*/_jsxs(\"tr\",{className:rowClass,children:[/*#__PURE__*/_jsx(\"td\",{children:flightTime}),/*#__PURE__*/_jsxs(\"td\",{children:[cityName,\" (\",iataCode,\")\"]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"img\",{src:airlineIcon,alt:airlineCode,className:\"airline-icon\"}),flightNumber]}),/*#__PURE__*/_jsx(\"td\",{children:gate}),/*#__PURE__*/_jsx(\"td\",{className:`status-cell ${statusClass}`,children:statusDisplay}),/*#__PURE__*/_jsx(\"td\",{children:estimatedTime})]},`${flightNumber}-${index}`);};const sectionId=type==='departures'?'departures-section':'arrivals-section';const title=type==='departures'?'DEPARTURES':'ARRIVALS';const tableId=type==='departures'?'departure-table':'arrival-table';const columnTitle=type==='departures'?'DESTINATION':'ORIGIN';return/*#__PURE__*/_jsxs(\"div\",{className:\"flight-section\",id:sectionId,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flight-icon\",children:\"\\u2708\\uFE0F\"}),/*#__PURE__*/_jsx(\"h2\",{children:title})]}),/*#__PURE__*/_jsxs(\"table\",{id:tableId,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"TIME\"}),/*#__PURE__*/_jsx(\"th\",{children:columnTitle}),/*#__PURE__*/_jsx(\"th\",{children:\"FLIGHT\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GATE\"}),/*#__PURE__*/_jsx(\"th\",{children:\"STATUS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"EST\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:processedFlights.map((flight,index)=>renderFlightRow(flight,index))})]})]});};export default FlightTable;","map":{"version":3,"names":["React","useState","useEffect","getCityNameFromIATA","formatFlightTime","isUpcomingFlight","sortFlightsByTime","jsx","_jsx","jsxs","_jsxs","FlightTable","_ref","type","flights","airportLocation","rowsCount","flightService","processedFlights","setProcessedFlights","airlineIcons","setAirlineIcons","processFlights","length","workingFlights","upcomingFlights","filter","flight","_flight$departure","_flight$departure2","departure","scheduledTime","scheduled","now","Date","f","arrival","sched","getTime","sort","a","b","tA","tB","uniqueFlights","seenFlightNo","Set","_flight$flight","_flight$flight2","_flight$flight3","_flight$flight4","flightNumber","iataNumber","iata","icaoNumber","number","has","toUpperCase","codeshared","push","add","iconPromises","map","_flight$airline","_flight$airline2","airlineCode","airline","iataCode","icon","fetchAirlineIcon","iconResults","Promise","all","newIcons","reduce","acc","result","Object","assign","prev","renderFlightRow","index","_flight$airline3","_flight$airline4","_flight$flight5","_flight$flight6","_flight$flight7","_flight$flight8","isDeparture","flightData","destinationData","flightTime","estimatedTime","estimated","cityName","airlineIcon","gate","status","flight_status","statusDisplay","statusClass","toLowerCase","replace","delay","rowClass","className","children","src","alt","sectionId","title","tableId","columnTitle","id"],"sources":["C:/Users/c.pulawski/workspace/pirs-react-app/widget/src/components/FlightTable.jsx"],"sourcesContent":["// widget/src/components/FlightTable.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  getCityNameFromIATA, \r\n  formatFlightTime, \r\n  isUpcomingFlight, \r\n  sortFlightsByTime \r\n} from '../services/utils';\r\n\r\nconst FlightTable = ({ type, flights, airportLocation, rowsCount, flightService }) => {\r\n  const [processedFlights, setProcessedFlights] = useState([]);\r\n  const [airlineIcons, setAirlineIcons] = useState({});\r\n\r\n  useEffect(() => {\r\n    processFlights();\r\n  }, [flights, rowsCount, type]);\r\n\r\n  const processFlights = async () => {\r\n    if (!flights || flights.length === 0) {\r\n      setProcessedFlights([]);\r\n      return;\r\n    }\r\n\r\n    let workingFlights = [...flights];\r\n\r\n    if (type === 'departures') {\r\n      // Filter upcoming flights for departures\r\n      let upcomingFlights = workingFlights.filter((flight) =>\r\n        isUpcomingFlight(flight.departure?.scheduledTime || flight.departure?.scheduled)\r\n      );\r\n\r\n      if (upcomingFlights.length === 0) {\r\n        upcomingFlights = [...workingFlights];\r\n      }\r\n\r\n      workingFlights = sortFlightsByTime(upcomingFlights, \"departure\");\r\n    } else {\r\n      // Filter and sort arrivals\r\n      const now = Date.now();\r\n      workingFlights = workingFlights\r\n        .filter(f => {\r\n          if (!f.arrival || !f.arrival.scheduled) return false;\r\n          const sched = new Date(f.arrival.scheduled).getTime();\r\n          return sched >= now;\r\n        })\r\n        .sort((a, b) => {\r\n          const tA = new Date(a.arrival.scheduled).getTime();\r\n          const tB = new Date(b.arrival.scheduled).getTime();\r\n          return tA - tB;\r\n        });\r\n    }\r\n\r\n    // Remove duplicates and limit rows\r\n    const uniqueFlights = [];\r\n    const seenFlightNo = new Set();\r\n\r\n    for (const flight of workingFlights) {\r\n      if (uniqueFlights.length >= rowsCount) break;\r\n      \r\n      const flightNumber = flight.flight?.iataNumber || flight.flight?.iata || \r\n                          flight.flight?.icaoNumber || flight.flight?.number;\r\n      \r\n      if (seenFlightNo.has(flightNumber?.toUpperCase()) || !!flight.codeshared) continue;\r\n      \r\n      uniqueFlights.push(flight);\r\n      if (flightNumber) {\r\n        seenFlightNo.add(flightNumber.toUpperCase());\r\n      }\r\n    }\r\n\r\n    setProcessedFlights(uniqueFlights);\r\n\r\n    // Fetch airline icons\r\n    const iconPromises = uniqueFlights.map(async (flight) => {\r\n      const airlineCode = flight.airline?.iataCode || flight.airline?.iata || \"XX\";\r\n      if (!airlineIcons[airlineCode]) {\r\n        const icon = await flightService.fetchAirlineIcon(airlineCode);\r\n        return { [airlineCode]: icon };\r\n      }\r\n      return null;\r\n    });\r\n\r\n    const iconResults = await Promise.all(iconPromises);\r\n    const newIcons = iconResults.reduce((acc, result) => {\r\n      if (result) Object.assign(acc, result);\r\n      return acc;\r\n    }, {});\r\n\r\n    setAirlineIcons(prev => ({ ...prev, ...newIcons }));\r\n  };\r\n\r\n  const renderFlightRow = (flight, index) => {\r\n    const isDeparture = type === 'departures';\r\n    const flightData = isDeparture ? flight.departure : flight.arrival;\r\n    const destinationData = isDeparture ? flight.arrival : flight.departure;\r\n\r\n    const flightTime = formatFlightTime(\r\n      flightData?.scheduledTime || flightData?.scheduled, \r\n      !isDeparture\r\n    );\r\n    \r\n    const estimatedTime = flightData?.estimatedTime || flightData?.estimated \r\n      ? formatFlightTime(flightData.estimatedTime || flightData.estimated, !isDeparture) \r\n      : \"-\";\r\n\r\n    const iataCode = destinationData?.iataCode || destinationData?.iata || \"Unknown\";\r\n    const cityName = getCityNameFromIATA(iataCode);\r\n\r\n    const airlineCode = flight.airline?.iataCode || flight.airline?.iata || \"XX\";\r\n    const airlineIcon = airlineIcons[airlineCode] || 'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 55 55\"><circle fill=\"#0381fe\" cx=\"27.5\" cy=\"7.5\" r=\"5.6\"/></svg>';\r\n\r\n    const flightNumber = flight.flight?.iataNumber || flight.flight?.iata || \r\n                        flight.flight?.icaoNumber || flight.flight?.number || \"N/A\";\r\n\r\n    let gate = flightData?.gate || \"Soon\";\r\n    let status = flight.flight_status || flight.status || \"N/A\";\r\n    let statusDisplay = status;\r\n    let statusClass = status.toLowerCase().replace(/\\s/g, \"-\");\r\n\r\n    if (flightData?.delay) {\r\n      status = \"delayed\";\r\n      statusDisplay = \"delayed\";\r\n      statusClass = \"delayed\";\r\n    }\r\n\r\n    const rowClass = index % 2 === 0 ? \"flight-row-even\" : \"flight-row-odd\";\r\n\r\n    return (\r\n      <tr key={`${flightNumber}-${index}`} className={rowClass}>\r\n        <td>{flightTime}</td>\r\n        <td>{cityName} ({iataCode})</td>\r\n        <td>\r\n          <img src={airlineIcon} alt={airlineCode} className=\"airline-icon\" />\r\n          {flightNumber}\r\n        </td>\r\n        <td>{gate}</td>\r\n        <td className={`status-cell ${statusClass}`}>{statusDisplay}</td>\r\n        <td>{estimatedTime}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const sectionId = type === 'departures' ? 'departures-section' : 'arrivals-section';\r\n  const title = type === 'departures' ? 'DEPARTURES' : 'ARRIVALS';\r\n  const tableId = type === 'departures' ? 'departure-table' : 'arrival-table';\r\n  const columnTitle = type === 'departures' ? 'DESTINATION' : 'ORIGIN';\r\n\r\n  return (\r\n    <div className=\"flight-section\" id={sectionId}>\r\n      <div className=\"section-header\">\r\n        <div className=\"flight-icon\">✈️</div>\r\n        <h2>{title}</h2>\r\n      </div>\r\n      <table id={tableId}>\r\n        <thead>\r\n          <tr>\r\n            <th>TIME</th>\r\n            <th>{columnTitle}</th>\r\n            <th>FLIGHT</th>\r\n            <th>GATE</th>\r\n            <th>STATUS</th>\r\n            <th>EST</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {processedFlights.map((flight, index) => renderFlightRow(flight, index))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightTable;"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OACEC,mBAAmB,CACnBC,gBAAgB,CAChBC,gBAAgB,CAChBC,iBAAiB,KACZ,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAAkE,IAAjE,CAAEC,IAAI,CAAEC,OAAO,CAAEC,eAAe,CAAEC,SAAS,CAAEC,aAAc,CAAC,CAAAL,IAAA,CAC/E,KAAM,CAACM,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACmB,YAAY,CAAEC,eAAe,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpDC,SAAS,CAAC,IAAM,CACdoB,cAAc,CAAC,CAAC,CAClB,CAAC,CAAE,CAACR,OAAO,CAAEE,SAAS,CAAEH,IAAI,CAAC,CAAC,CAE9B,KAAM,CAAAS,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CAACR,OAAO,EAAIA,OAAO,CAACS,MAAM,GAAK,CAAC,CAAE,CACpCJ,mBAAmB,CAAC,EAAE,CAAC,CACvB,OACF,CAEA,GAAI,CAAAK,cAAc,CAAG,CAAC,GAAGV,OAAO,CAAC,CAEjC,GAAID,IAAI,GAAK,YAAY,CAAE,CACzB;AACA,GAAI,CAAAY,eAAe,CAAGD,cAAc,CAACE,MAAM,CAAEC,MAAM,OAAAC,iBAAA,CAAAC,kBAAA,OACjD,CAAAxB,gBAAgB,CAAC,EAAAuB,iBAAA,CAAAD,MAAM,CAACG,SAAS,UAAAF,iBAAA,iBAAhBA,iBAAA,CAAkBG,aAAa,KAAAF,kBAAA,CAAIF,MAAM,CAACG,SAAS,UAAAD,kBAAA,iBAAhBA,kBAAA,CAAkBG,SAAS,EAAC,EAClF,CAAC,CAED,GAAIP,eAAe,CAACF,MAAM,GAAK,CAAC,CAAE,CAChCE,eAAe,CAAG,CAAC,GAAGD,cAAc,CAAC,CACvC,CAEAA,cAAc,CAAGlB,iBAAiB,CAACmB,eAAe,CAAE,WAAW,CAAC,CAClE,CAAC,IAAM,CACL;AACA,KAAM,CAAAQ,GAAG,CAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CACtBT,cAAc,CAAGA,cAAc,CAC5BE,MAAM,CAACS,CAAC,EAAI,CACX,GAAI,CAACA,CAAC,CAACC,OAAO,EAAI,CAACD,CAAC,CAACC,OAAO,CAACJ,SAAS,CAAE,MAAO,MAAK,CACpD,KAAM,CAAAK,KAAK,CAAG,GAAI,CAAAH,IAAI,CAACC,CAAC,CAACC,OAAO,CAACJ,SAAS,CAAC,CAACM,OAAO,CAAC,CAAC,CACrD,MAAO,CAAAD,KAAK,EAAIJ,GAAG,CACrB,CAAC,CAAC,CACDM,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CACd,KAAM,CAAAC,EAAE,CAAG,GAAI,CAAAR,IAAI,CAACM,CAAC,CAACJ,OAAO,CAACJ,SAAS,CAAC,CAACM,OAAO,CAAC,CAAC,CAClD,KAAM,CAAAK,EAAE,CAAG,GAAI,CAAAT,IAAI,CAACO,CAAC,CAACL,OAAO,CAACJ,SAAS,CAAC,CAACM,OAAO,CAAC,CAAC,CAClD,MAAO,CAAAI,EAAE,CAAGC,EAAE,CAChB,CAAC,CAAC,CACN,CAEA;AACA,KAAM,CAAAC,aAAa,CAAG,EAAE,CACxB,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAE9B,IAAK,KAAM,CAAAnB,MAAM,GAAI,CAAAH,cAAc,CAAE,KAAAuB,cAAA,CAAAC,eAAA,CAAAC,eAAA,CAAAC,eAAA,CACnC,GAAIN,aAAa,CAACrB,MAAM,EAAIP,SAAS,CAAE,MAEvC,KAAM,CAAAmC,YAAY,CAAG,EAAAJ,cAAA,CAAApB,MAAM,CAACA,MAAM,UAAAoB,cAAA,iBAAbA,cAAA,CAAeK,UAAU,KAAAJ,eAAA,CAAIrB,MAAM,CAACA,MAAM,UAAAqB,eAAA,iBAAbA,eAAA,CAAeK,IAAI,KAAAJ,eAAA,CACjDtB,MAAM,CAACA,MAAM,UAAAsB,eAAA,iBAAbA,eAAA,CAAeK,UAAU,KAAAJ,eAAA,CAAIvB,MAAM,CAACA,MAAM,UAAAuB,eAAA,iBAAbA,eAAA,CAAeK,MAAM,EAEtE,GAAIV,YAAY,CAACW,GAAG,CAACL,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAEM,WAAW,CAAC,CAAC,CAAC,EAAI,CAAC,CAAC9B,MAAM,CAAC+B,UAAU,CAAE,SAE1Ed,aAAa,CAACe,IAAI,CAAChC,MAAM,CAAC,CAC1B,GAAIwB,YAAY,CAAE,CAChBN,YAAY,CAACe,GAAG,CAACT,YAAY,CAACM,WAAW,CAAC,CAAC,CAAC,CAC9C,CACF,CAEAtC,mBAAmB,CAACyB,aAAa,CAAC,CAElC;AACA,KAAM,CAAAiB,YAAY,CAAGjB,aAAa,CAACkB,GAAG,CAAC,KAAO,CAAAnC,MAAM,EAAK,KAAAoC,eAAA,CAAAC,gBAAA,CACvD,KAAM,CAAAC,WAAW,CAAG,EAAAF,eAAA,CAAApC,MAAM,CAACuC,OAAO,UAAAH,eAAA,iBAAdA,eAAA,CAAgBI,QAAQ,KAAAH,gBAAA,CAAIrC,MAAM,CAACuC,OAAO,UAAAF,gBAAA,iBAAdA,gBAAA,CAAgBX,IAAI,GAAI,IAAI,CAC5E,GAAI,CAACjC,YAAY,CAAC6C,WAAW,CAAC,CAAE,CAC9B,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAnD,aAAa,CAACoD,gBAAgB,CAACJ,WAAW,CAAC,CAC9D,MAAO,CAAE,CAACA,WAAW,EAAGG,IAAK,CAAC,CAChC,CACA,MAAO,KAAI,CACb,CAAC,CAAC,CAEF,KAAM,CAAAE,WAAW,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACX,YAAY,CAAC,CACnD,KAAM,CAAAY,QAAQ,CAAGH,WAAW,CAACI,MAAM,CAAC,CAACC,GAAG,CAAEC,MAAM,GAAK,CACnD,GAAIA,MAAM,CAAEC,MAAM,CAACC,MAAM,CAACH,GAAG,CAAEC,MAAM,CAAC,CACtC,MAAO,CAAAD,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAENtD,eAAe,CAAC0D,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE,GAAGN,QAAS,CAAC,CAAC,CAAC,CACrD,CAAC,CAED,KAAM,CAAAO,eAAe,CAAGA,CAACrD,MAAM,CAAEsD,KAAK,GAAK,KAAAC,gBAAA,CAAAC,gBAAA,CAAAC,eAAA,CAAAC,eAAA,CAAAC,eAAA,CAAAC,eAAA,CACzC,KAAM,CAAAC,WAAW,CAAG3E,IAAI,GAAK,YAAY,CACzC,KAAM,CAAA4E,UAAU,CAAGD,WAAW,CAAG7D,MAAM,CAACG,SAAS,CAAGH,MAAM,CAACS,OAAO,CAClE,KAAM,CAAAsD,eAAe,CAAGF,WAAW,CAAG7D,MAAM,CAACS,OAAO,CAAGT,MAAM,CAACG,SAAS,CAEvE,KAAM,CAAA6D,UAAU,CAAGvF,gBAAgB,CACjC,CAAAqF,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAE1D,aAAa,IAAI0D,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEzD,SAAS,EAClD,CAACwD,WACH,CAAC,CAED,KAAM,CAAAI,aAAa,CAAGH,UAAU,SAAVA,UAAU,WAAVA,UAAU,CAAEG,aAAa,EAAIH,UAAU,SAAVA,UAAU,WAAVA,UAAU,CAAEI,SAAS,CACpEzF,gBAAgB,CAACqF,UAAU,CAACG,aAAa,EAAIH,UAAU,CAACI,SAAS,CAAE,CAACL,WAAW,CAAC,CAChF,GAAG,CAEP,KAAM,CAAArB,QAAQ,CAAG,CAAAuB,eAAe,SAAfA,eAAe,iBAAfA,eAAe,CAAEvB,QAAQ,IAAIuB,eAAe,SAAfA,eAAe,iBAAfA,eAAe,CAAErC,IAAI,GAAI,SAAS,CAChF,KAAM,CAAAyC,QAAQ,CAAG3F,mBAAmB,CAACgE,QAAQ,CAAC,CAE9C,KAAM,CAAAF,WAAW,CAAG,EAAAiB,gBAAA,CAAAvD,MAAM,CAACuC,OAAO,UAAAgB,gBAAA,iBAAdA,gBAAA,CAAgBf,QAAQ,KAAAgB,gBAAA,CAAIxD,MAAM,CAACuC,OAAO,UAAAiB,gBAAA,iBAAdA,gBAAA,CAAgB9B,IAAI,GAAI,IAAI,CAC5E,KAAM,CAAA0C,WAAW,CAAG3E,YAAY,CAAC6C,WAAW,CAAC,EAAI,+IAA+I,CAEhM,KAAM,CAAAd,YAAY,CAAG,EAAAiC,eAAA,CAAAzD,MAAM,CAACA,MAAM,UAAAyD,eAAA,iBAAbA,eAAA,CAAehC,UAAU,KAAAiC,eAAA,CAAI1D,MAAM,CAACA,MAAM,UAAA0D,eAAA,iBAAbA,eAAA,CAAehC,IAAI,KAAAiC,eAAA,CACjD3D,MAAM,CAACA,MAAM,UAAA2D,eAAA,iBAAbA,eAAA,CAAehC,UAAU,KAAAiC,eAAA,CAAI5D,MAAM,CAACA,MAAM,UAAA4D,eAAA,iBAAbA,eAAA,CAAehC,MAAM,GAAI,KAAK,CAE/E,GAAI,CAAAyC,IAAI,CAAG,CAAAP,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEO,IAAI,GAAI,MAAM,CACrC,GAAI,CAAAC,MAAM,CAAGtE,MAAM,CAACuE,aAAa,EAAIvE,MAAM,CAACsE,MAAM,EAAI,KAAK,CAC3D,GAAI,CAAAE,aAAa,CAAGF,MAAM,CAC1B,GAAI,CAAAG,WAAW,CAAGH,MAAM,CAACI,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAE,GAAG,CAAC,CAE1D,GAAIb,UAAU,SAAVA,UAAU,WAAVA,UAAU,CAAEc,KAAK,CAAE,CACrBN,MAAM,CAAG,SAAS,CAClBE,aAAa,CAAG,SAAS,CACzBC,WAAW,CAAG,SAAS,CACzB,CAEA,KAAM,CAAAI,QAAQ,CAAGvB,KAAK,CAAG,CAAC,GAAK,CAAC,CAAG,iBAAiB,CAAG,gBAAgB,CAEvE,mBACEvE,KAAA,OAAqC+F,SAAS,CAAED,QAAS,CAAAE,QAAA,eACvDlG,IAAA,OAAAkG,QAAA,CAAKf,UAAU,CAAK,CAAC,cACrBjF,KAAA,OAAAgG,QAAA,EAAKZ,QAAQ,CAAC,IAAE,CAAC3B,QAAQ,CAAC,GAAC,EAAI,CAAC,cAChCzD,KAAA,OAAAgG,QAAA,eACElG,IAAA,QAAKmG,GAAG,CAAEZ,WAAY,CAACa,GAAG,CAAE3C,WAAY,CAACwC,SAAS,CAAC,cAAc,CAAE,CAAC,CACnEtD,YAAY,EACX,CAAC,cACL3C,IAAA,OAAAkG,QAAA,CAAKV,IAAI,CAAK,CAAC,cACfxF,IAAA,OAAIiG,SAAS,CAAE,eAAeL,WAAW,EAAG,CAAAM,QAAA,CAAEP,aAAa,CAAK,CAAC,cACjE3F,IAAA,OAAAkG,QAAA,CAAKd,aAAa,CAAK,CAAC,GATjB,GAAGzC,YAAY,IAAI8B,KAAK,EAU7B,CAAC,CAET,CAAC,CAED,KAAM,CAAA4B,SAAS,CAAGhG,IAAI,GAAK,YAAY,CAAG,oBAAoB,CAAG,kBAAkB,CACnF,KAAM,CAAAiG,KAAK,CAAGjG,IAAI,GAAK,YAAY,CAAG,YAAY,CAAG,UAAU,CAC/D,KAAM,CAAAkG,OAAO,CAAGlG,IAAI,GAAK,YAAY,CAAG,iBAAiB,CAAG,eAAe,CAC3E,KAAM,CAAAmG,WAAW,CAAGnG,IAAI,GAAK,YAAY,CAAG,aAAa,CAAG,QAAQ,CAEpE,mBACEH,KAAA,QAAK+F,SAAS,CAAC,gBAAgB,CAACQ,EAAE,CAAEJ,SAAU,CAAAH,QAAA,eAC5ChG,KAAA,QAAK+F,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BlG,IAAA,QAAKiG,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,cAAE,CAAK,CAAC,cACrClG,IAAA,OAAAkG,QAAA,CAAKI,KAAK,CAAK,CAAC,EACb,CAAC,cACNpG,KAAA,UAAOuG,EAAE,CAAEF,OAAQ,CAAAL,QAAA,eACjBlG,IAAA,UAAAkG,QAAA,cACEhG,KAAA,OAAAgG,QAAA,eACElG,IAAA,OAAAkG,QAAA,CAAI,MAAI,CAAI,CAAC,cACblG,IAAA,OAAAkG,QAAA,CAAKM,WAAW,CAAK,CAAC,cACtBxG,IAAA,OAAAkG,QAAA,CAAI,QAAM,CAAI,CAAC,cACflG,IAAA,OAAAkG,QAAA,CAAI,MAAI,CAAI,CAAC,cACblG,IAAA,OAAAkG,QAAA,CAAI,QAAM,CAAI,CAAC,cACflG,IAAA,OAAAkG,QAAA,CAAI,KAAG,CAAI,CAAC,EACV,CAAC,CACA,CAAC,cACRlG,IAAA,UAAAkG,QAAA,CACGxF,gBAAgB,CAAC4C,GAAG,CAAC,CAACnC,MAAM,CAAEsD,KAAK,GAAKD,eAAe,CAACrD,MAAM,CAAEsD,KAAK,CAAC,CAAC,CACnE,CAAC,EACH,CAAC,EACL,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}